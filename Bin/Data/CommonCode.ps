cbuffer PerFramePS : register(b0)
{
    float3 ambientColor;
}

cbuffer LightsPS : register(b3)
{
    float4 lightPositions[4];
    float4 lightDirections[4];
    float4 lightAttenuations[4];
    float4 lightColors[4];
    float4 shadowParameters[4];
}

Texture2D shadowTex[4] : register(t8);
SamplerComparisonState shadowSampler[4] : register(s8);

float SampleShadowMap(int index, float4 shadowPos)
{
    shadowPos.xyz /= shadowPos.w;
    float2 offsets1 = shadowParameters[index].xy;
    float2 offsets2 = float2(shadowParameters[index].x, -shadowParameters[index].y);

    return (shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy + offsets1, shadowPos.z) +
        shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy - offsets1, shadowPos.z) +
        shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy + offsets2, shadowPos.z) +
        shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy - offsets2, shadowPos.z)) * 0.25;
}

float CalculatePointAtten(int index, float3 worldPos, float3 normal)
{
    float3 lightVec = (lightPositions[index].xyz - worldPos) * lightAttenuations[index].x;
    float lightDist = length(lightVec);
    float3 localDir = lightVec / lightDist;
    float NdotL = saturate(dot(normal, localDir));
    return NdotL * saturate(1.0 - lightDist * lightDist);
}

float CalculateSpotAtten(int index, float3 worldPos, float3 normal)
{
    float3 lightVec = (lightPositions[index].xyz - worldPos) * lightAttenuations[index].x;
    float lightDist = length(lightVec);
    float3 localDir = lightVec / lightDist;
    float NdotL = saturate(dot(normal, localDir));
    float spotEffect = dot(localDir, lightDirections[index].xyz);
    float spotAtten = saturate((spotEffect - lightAttenuations[index].y) * lightAttenuations[index].z);
    return NdotL * spotAtten * saturate(1.0 - lightDist * lightDist);
}

float3 CalculateDirLight(int index, float3 worldPos, float3 normal)
{
    float NdotL = saturate(dot(normal, lightDirections[index].xyz));
    return NdotL * lightColors[index].rgb;
}

float3 CalculatePointLight(int index, float3 worldPos, float3 normal)
{
    return CalculatePointAtten(index, worldPos, normal) * lightColors[index].rgb;
}

float3 CalculateSpotLight(int index, float3 worldPos, float3 normal)
{
    return CalculateSpotAtten(index, worldPos, normal) * lightColors[index].rgb;
}

float3 CalculateShadowSpotLight(int index, float3 worldPos, float3 normal, float4 shadowPos)
{
    float atten = CalculateSpotAtten(index, worldPos, normal);
    if (atten > 0)
        atten *= SampleShadowMap(index, shadowPos);
    return atten * lightColors[index].rgb;
}

#ifdef SHADOW
float4 CalculateLighting(float3 worldPos, float3 normal, float4 shadowPos[4])
#else
float4 CalculateLighting(float3 worldPos, float3 normal)
#endif
{
    #ifdef SHADOW
    int shadowIndex = 0;
    #endif

    float4 totalLight = float4(0, 0, 0, 1);
    
    #ifdef AMBIENT
    totalLight.rgb += ambientColor;
    #endif

    #ifdef DIRLIGHT0
    totalLight.rgb += CalculateDirLight(0, worldPos, normal);
    #endif
    #ifdef DIRLIGHT1
    totalLight.rgb += CalculateDirLight(1, worldPos, normal);
    #endif
    #ifdef DIRLIGHT2
    totalLight.rgb += CalculateDirLight(2, worldPos, normal);
    #endif
    #ifdef DIRLIGHT3
    totalLight.rgb += CalculateDirLight(3, worldPos, normal);
    #endif
    
    #ifdef POINTLIGHT0
    totalLight.rgb += CalculatePointLight(0, worldPos, normal);
    #endif
    #ifdef POINTLIGHT1
    totalLight.rgb += CalculatePointLight(1, worldPos, normal);
    #endif
    #ifdef POINTLIGHT2
    totalLight.rgb += CalculatePointLight(2, worldPos, normal);
    #endif
    #ifdef POINTLIGHT3
    totalLight.rgb += CalculatePointLight(3, worldPos, normal);
    #endif
    
    #ifdef SPOTLIGHT0
    #ifdef SHADOW0
    totalLight.rgb += CalculateShadowSpotLight(0, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(0, worldPos, normal);
    #endif
    #endif
    #ifdef SPOTLIGHT1
    #ifdef SHADOW1
    totalLight.rgb += CalculateShadowSpotLight(1, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(1, worldPos, normal);
    #endif
    #endif
    #ifdef SPOTLIGHT2
    #ifdef SHADOW2
    totalLight.rgb += CalculateShadowSpotLight(2, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(2, worldPos, normal);
    #endif
    #endif
    #ifdef SPOTLIGHT3
    #ifdef SHADOW3
    totalLight.rgb += CalculateShadowSpotLight(3, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(3, worldPos, normal);
    #endif
    #endif

    return totalLight;
}

